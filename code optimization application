import tkinter as tk
from tkinter import filedialog, messagebox
import re

class CodeOptimizerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Code Optimization Application")
        self.root.geometry("1000x700")
        self.root.resizable(False, False)

        # Title Label
        self.title_label = tk.Label(root, text="Code Optimization Application", font=("Helvetica", 16, "bold"))
        self.title_label.pack(pady=10)

        # Frame for input/output sections
        main_frame = tk.Frame(root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # Left frame for input
        input_frame = tk.Frame(main_frame)
        input_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5)

        # Horizontal frame for dropdown and upload button
        top_input_controls = tk.Frame(input_frame)
        top_input_controls.pack(fill=tk.X, pady=5)

        self.language_var = tk.StringVar(value="Python")
        self.language_menu = tk.OptionMenu(top_input_controls, self.language_var, "Python", "C", "Java")
        self.language_menu.config(width=15)
        self.language_menu.pack(side=tk.LEFT, padx=5)

        self.upload_button = tk.Button(top_input_controls, text="Upload Code File", command=self.load_file)
        self.upload_button.pack(side=tk.LEFT, padx=5)

        self.input_text = tk.Text(input_frame, height=30, width=60)
        self.input_text.pack(fill=tk.BOTH, expand=True)

        # Right frame for output
        output_frame = tk.Frame(main_frame)
        output_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=5)

        self.save_button = tk.Button(output_frame, text="Save Optimized Code", command=self.save_file)
        self.save_button.pack(pady=5)

        self.output_text = tk.Text(output_frame, height=30, width=60, bg="#f5f5f5", state='disabled')
        self.output_text.pack(fill=tk.BOTH, expand=True)

        # Optimize button
        self.optimize_button = tk.Button(root, text="Optimize Code", command=self.optimize_code, font=("Helvetica", 12))
        self.optimize_button.pack(pady=10)

    def load_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("All Code Files", "*.py *.c *.java *.txt")])
        if file_path:
            with open(file_path, 'r') as file:
                self.input_text.delete("1.0", tk.END)
                self.input_text.insert(tk.END, file.read())

    def save_file(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")])
        if file_path:
            content = self.output_text.get("1.0", tk.END)
            with open(file_path, 'w') as file:
                file.write(content)
            messagebox.showinfo("Saved", "Optimized code saved successfully.")

    def optimize_code(self):
        language = self.language_var.get()
        code = self.input_text.get("1.0", tk.END)

        if language == "Python":
            optimized = self.optimize_python(code)
        elif language == "C":
            optimized = self.optimize_c(code)
        elif language == "Java":
            optimized = self.optimize_java(code)
        else:
            optimized = code  # fallback

        self.output_text.config(state='normal')
        self.output_text.delete("1.0", tk.END)
        self.output_text.insert(tk.END, optimized)
        self.output_text.config(state='disabled')

    def optimize_python(self, code):
        code = self.memory_optimization(code, lang='python')
        return self.performance_optimization(code, lang='python')

    def optimize_c(self, code):
        code = self.memory_optimization(code, lang='c')
        return self.performance_optimization(code, lang='c')

    def optimize_java(self, code):
        code = self.memory_optimization(code, lang='java')
        return self.performance_optimization(code, lang='java')

    def memory_optimization(self, code, lang):
        lines = code.split('\n')
        var_usage = {}
        assigned_vars = {}

        # Patterns based on language
        if lang == 'python':
            pattern = r'\s*(\w+)\s*=\s*(.+)'
        elif lang in ['c', 'java']:
            pattern = r'\s*(int|float|double|String|char)\s+(\w+)\s*(=\s*[^;]+)?;'
        else:
            return code

        for i, line in enumerate(lines):
            match = re.match(pattern, line)
            if match:
                if lang == 'python':
                    var = match.group(1)
                else:
                    var = match.group(2)
                assigned_vars[var] = i

            for var in assigned_vars:
                if re.search(r'\b' + var + r'\b', line):
                    var_usage[var] = var_usage.get(var, 0) + 1

        optimized_lines = []
        for i, line in enumerate(lines):
            skip = False
            for var, idx in assigned_vars.items():
                if idx == i and var_usage.get(var, 0) <= 1:
                    skip = True
            if not skip:
                optimized_lines.append(line)
        return "\n".join(optimized_lines)

    def performance_optimization(self, code, lang):
        lines = code.split('\n')
        expression_count = {}

        # Basic pattern for function calls
        if lang == 'python':
            pattern = r'(\w+\(.*?\))'
        elif lang in ['c', 'java']:
            pattern = r'(\w+\s*\([^)]*\))'
        else:
            return code

        for line in lines:
            expressions = re.findall(pattern, line)
            for expr in expressions:
                expression_count[expr] = expression_count.get(expr, 0) + 1

        replacements = {}
        counter = 1
        for expr, count in expression_count.items():
            if count > 1 and len(expr) > 5:
                var_name = f"_opt_expr_{counter}"
                counter += 1
                replacements[expr] = var_name

        new_lines = []
        if replacements:
            new_lines.append("// Performance optimizations" if lang != 'python' else "# Performance optimizations")
            for expr, var in replacements.items():
                line = f"{var} = {expr};" if lang != 'python' else f"{var} = {expr}"
                new_lines.append(line)

        for line in lines:
            for expr, var in replacements.items():
                line = line.replace(expr, var)
            new_lines.append(line)

        return "\n".join(new_lines)


if __name__ == "__main__":
    root = tk.Tk()
    app = CodeOptimizerApp(root)
    root.mainloop()
